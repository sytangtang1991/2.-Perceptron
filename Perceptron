#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 11 06:55:05 2019

@author: yangsong
"""



from sklearn import datasets
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.lines as mlines


np.random.seed(10)

# Input data
iris=datasets.load_iris()
X = iris.data[0:99,:2]
y = iris.target[0:99]


# Plot figure
# X1_min,X1_max= X[:,0].min() - .5, X[:,0].max() + .5;
# X2_min,X2_max= X[:,1].min() - .5, X[:,1].max() + .5;

# plt.figure(2,figsize=(8,6))
# plt.clf()

# plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,edgecolor='k')
# plt.xlabel('Sepal length')
# plt.ylabel('Sepal width')
# plt.xlim(X1_min, X1_max)
# plt.ylim(X2_min, X2_max)



#plt.plot(X[:50, 0], X[:50, 1], 'bo', color='blue', label='0')
#plt.plot(X[50:99, 0], X[50:99, 1], 'bo', color='orange', label='1')
#plt.xlabel('sepal length')
#plt.ylabel('sepal width')
#plt.legend()


# Update y into -1 and 1
y=np.array([1 if i==1 else -1 for i in y])

#################################
# Gradient Descent
#################################
# Initialize parameters
w=np.ones((X.shape[1],1));
b=1;
learning_rate=0.1
Round=0
All_Correct=False;

# Start Gradient Descent
while not All_Correct:
    
    misclassified_count=0
    for i in range(X.shape[0]):
        XX=X[i,]
        yy=y[i]
        if yy * (np.dot(w.T,XX.T)+b)<0:
            w+=learning_rate * np.dot(XX,yy).reshape(2,1)
            b+=learning_rate * yy
            misclassified_count +=1
                 
    if misclassified_count==0:
        All_Correct=True
    else:
        All_Correct=False
    
    Round += 1
    print(Round)
            
print(w)
print(b)


#7.9 X_1 + -10.07 X_2 - 12.39999999 = 0
## Plot linear classification
#fig, ax = plt.subplots()
#ax.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,edgecolor='k')
#line_B_GD=mlines.Line2D([0,7],[-1.23138,4.26],color='red')
#ax.add_line(line_B_GD)
#ax.set_xlabel('Sepal length')
#plt.show()

    
    

x_points = np.linspace(4,7,10)
y_ = -(w[0]*x_points + b)/w[1]
plt.plot(x_points, y_)

plt.plot(X[:50, 0], X[:50, 1], 'bo', color='blue', label='0')
plt.plot(X[50:99, 0], X[50:99, 1], 'bo', color='orange', label='1')
plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.legend()
    
    
    
    





